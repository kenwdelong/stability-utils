package com.kendelong.util.monitoring.graphite;

import java.net.InetAddress;
import java.net.UnknownHostException;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Required;

/**
 * Sends data to a Graphite server (through a statsd server; @see <a href="https://github.com/etsy/statsd/">Stats</a>)
 * 
 * The bucket that it sends data do is <serverEnv>.<appName>.<serverType>.<serverName>.<key>.
 * So if you call graphiteClient.increment("login.success"), the final bucket might be
 * "production.userManagement.tomcat.myhost1.login.success".  This allows you to separate different environments (prod from stag, for
 * example), differentiate the app name, and serverType might be "tomcat", "apache", "node", etc.
 * 
 * Technically, this client talks to a statsd server.
 * The client creates a specially crafted message to the statsd server, which in turn forwards it to the underlying graphite server.
 */
public class GraphiteClient implements InitializingBean
{
	private final Log logger = LogFactory.getLog(GraphiteClient.class);

	private IStatsdClient statsdClient;
	private String serverEnv;
	private String appName;
	private String serverType = "app";
	private String prefix;
	
	private String host;
	private Integer port;
	
	@Override
	public void afterPropertiesSet() throws Exception 
	{
		StringBuilder sb = new StringBuilder();
		sb.append(serverEnv).append(".");
		sb.append(appName).append(".");
		sb.append(serverType).append(".");
		sb.append(escapeKey(getServerName())).append(".");
		prefix = sb.toString();
		
		try
		{
			statsdClient = new StatsdClient(host, port);
		}
		catch(Exception e)
		{
			statsdClient = new NullStatsdClient();
			logger.warn("Using NULL statsdClient. Monitoring calls will not be sent to statsd server.");
		}
	}
	
	/*
	 * Used to escape keys that might be autogenerated with periods in their values
	 * For example, let's say getting the IP address returned 192.168.1.10
	 * And let's say we didn't want graphite to create hierarchical categories, then we'd
	 * use this method to escape the value. 
	 * In this example, it escapes to 192-168-1-10
	 */
	public static String escapeKey(String key)
	{
		if (StringUtils.isNotBlank(key))
			return key.replaceAll("\\.", "-");
		else
			return key;
	}
	
	private String getServerName()
	{
		String hostname = null;
		try 
		{
		    InetAddress addr = InetAddress.getLocalHost();
		    // Get hostname
		    hostname = addr.getHostName();
		} 
		catch (UnknownHostException e) 
		{
			hostname = "unk";
		}
		return hostname;
	}
	
	public String getPrefix()
	{
		return prefix;
	}
	
	private String getPrefixedKey (String key)
	{
		return prefix + key;
	}
	
	private String[] getPrefixedKeys (String... keys)
	{
		
		String []prefixedKeys = new String[keys.length];
		for (int i = 0; i < keys.length; i++)
		{
			prefixedKeys[i] = prefix + keys[i];
		}
		return prefixedKeys;
	}

	public boolean timing(String key, int value)
	{
		return statsdClient.timing(getPrefixedKey(key), value);
	}

	public boolean timing(String key, int value, double sampleRate)
	{
		return statsdClient.timing(getPrefixedKey(key), value, sampleRate);
	}

	public boolean decrement(String key)
	{
		return statsdClient.decrement(getPrefixedKey(key));
	}

	public boolean decrement(String key, int magnitude)
	{
		return statsdClient.decrement(getPrefixedKey(key), magnitude);
	}

	public boolean decrement(String key, int magnitude, double sampleRate)
	{
		return statsdClient.decrement(getPrefixedKey(key), magnitude, sampleRate);
	}

	public boolean decrement(String... keys)
	{
		return statsdClient.decrement(getPrefixedKeys(keys));
	}

	public boolean decrement(int magnitude, String... keys)
	{
		return statsdClient.decrement(magnitude, getPrefixedKeys(keys));
	}

	public boolean decrement(int magnitude, double sampleRate, String... keys)
	{
		return statsdClient.decrement(magnitude, sampleRate, getPrefixedKeys(keys));
	}

	public boolean increment(String key)
	{
		return statsdClient.increment(getPrefixedKey(key));
	}

	public boolean increment(String key, int magnitude)
	{
		return statsdClient.increment(getPrefixedKey(key), magnitude);
	}

	public boolean increment(String key, int magnitude, double sampleRate)
	{
		return statsdClient.increment(getPrefixedKey(key), magnitude, sampleRate);
	}

	public boolean increment(int magnitude, double sampleRate, String... keys)
	{
		return statsdClient.increment(magnitude, sampleRate, getPrefixedKeys(keys));
	}

	public String getServerEnv()
	{
		return serverEnv;
	}

	@Required
	public void setServerEnv(String serverPhase)
	{
		this.serverEnv = serverPhase;
	}

	public String getAppName()
	{
		return appName;
	}

	@Required
	public void setAppName(String appName)
	{
		this.appName = appName;
	}

	public String getServerType()
	{
		return serverType;
	}

	public void setServerType(String serverType)
	{
		this.serverType = serverType;
	}

	public String getHost()
	{
		return host;
	}

	@Required
	public void setHost(String host)
	{
		this.host = host;
	}

	public Integer getPort()
	{
		return port;
	}

	@Required
	public void setPort(Integer port)
	{
		this.port = port;
	}
}
